/*
 * ta-solve
 *
 * The unnamed Tin Arm solver API
 *
 * API version: 1.0
 * Contact: api@tinarmengineering.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"database/sql"
	"encoding/json"

	dbo "github.com/tinarmengineering/tinarm-api-srv/go/dbo"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

const (
	DB_CONNECTION        = "root:tinarm@tcp(127.0.0.1:40000)/"
	DB_NAME              = "hellodb"
	DB_CONNECTION_STRING = DB_CONNECTION + DB_NAME + "?charset=utf8mb4&parseTime=True&loc=Local"
)

// DefaultApiService is a service that implements the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {

	ensureDbExists(DB_CONNECTION, DB_NAME)

	db, err := gorm.Open(mysql.Open(DB_CONNECTION_STRING), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}

	// Migrate the schema
	db.AutoMigrate(&dbo.Job{})

	return &DefaultApiService{}
}

// DeleteJobsId - Delete Job
func (s *DefaultApiService) DeleteJobsId(ctx context.Context, id interface{}) (ImplResponse, error) {

	db, err := gorm.Open(mysql.Open(DB_CONNECTION_STRING), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}

	var job dbo.Job
	db.Delete(&job, id)

	return Response(200, nil), nil
}

// GetJobsId - Get Job
func (s *DefaultApiService) GetJobsId(ctx context.Context, id interface{}) (ImplResponse, error) {

	db, err := gorm.Open(mysql.Open(DB_CONNECTION_STRING), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}

	var job dbo.Job
	db.First(&job, id)

	if job.ID == 0 {
		return Response(404, nil), nil
	}

	return Response(200, job), nil
}

// PostJobs - Create Job
func (s *DefaultApiService) PostJobs(ctx context.Context, job Job) (ImplResponse, error) {

	db, err := gorm.Open(mysql.Open(DB_CONNECTION_STRING), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}

	b, err := json.Marshal(job.Stator)

	db.Create(&dbo.Job{Data: string(b)})

	return Response(200, nil), nil
}

func ensureDbExists(connection string, name string) {

	db, err := sql.Open("mysql", connection)
	if err != nil {
		panic(err)
	}
	defer db.Close()

	_, err = db.Exec("CREATE DATABASE IF NOT EXISTS " + name)
	if err != nil {
		panic(err)
	}
}
