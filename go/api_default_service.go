/*
 * ta-solve
 *
 * The unnamed Tin Arm solver API
 *
 * API version: 1.0
 * Contact: api@tinarmengineering.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"

	dbo "github.com/tinarmengineering/tinarm-api-srv/go/dbo"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

// DefaultApiService is a service that implements the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {
	return &DefaultApiService{}
}

// DeleteJobsId - Delete Job
func (s *DefaultApiService) DeleteJobsId(ctx context.Context, id interface{}) (ImplResponse, error) {
	dsn := "root:tinarm@tcp(127.0.0.1:40000)/hellodb?charset=utf8mb4&parseTime=True&loc=Local"
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}

	var job dbo.Job
	db.Delete(&job, id)

	return Response(200, nil), nil
}

// GetJobsId - Get Job
func (s *DefaultApiService) GetJobsId(ctx context.Context, id interface{}) (ImplResponse, error) {
	dsn := "root:tinarm@tcp(127.0.0.1:40000)/hellodb?charset=utf8mb4&parseTime=True&loc=Local"
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}

	var job dbo.Job
	db.First(&job, id)

	if job.ID == 0 {
		return Response(404, nil), nil
	}

	return Response(200, job), nil
}

// PostJobs - Create Job
func (s *DefaultApiService) PostJobs(ctx context.Context, job Job) (ImplResponse, error) {
	// TODO - update PostJobs with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	dsn := "root:tinarm@tcp(127.0.0.1:40000)/hellodb?charset=utf8mb4&parseTime=True&loc=Local"
	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}

	db.Create(&dbo.Job{Data: "yaya"})

	return Response(200, nil), nil
}
