/*
 * ta-solve
 *
 * The unnamed Tin Arm solver API
 *
 * API version: 1.0
 * Contact: api@tinarmengineering.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
	"github.com/tinarmengineering/tinarm-api-srv/go/dbo"
)

// DeleteJobsId - Delete Job
func DoDeleteJobsId(c *gin.Context) {

	var job dbo.Job
	dbo.DB.Delete(&job, c.Param("id"))

	c.JSON(http.StatusOK, gin.H{})
}

// GetJobsId - Get Job
func DoGetJobsId(c *gin.Context) {

	var job dbo.Job
	dbo.DB.First(&job, c.Param("id"))

	if job.ID == 0 {
		c.JSON(http.StatusNotFound, gin.H{})
	} else {
		c.JSON(http.StatusOK, job)
	}
}

// PostRectanglejobs - Create RectangleJob
func DoPostRectanglejobs(c *gin.Context) {

	var rJob Rectanglejob
	err := c.BindJSON(&rJob)
	if err != nil {
		c.JSON(http.StatusBadRequest, err)
		return
	}

	rJobGeomotry, err := json.Marshal(rJob.Geometry)
	if err != nil {
		c.JSON(http.StatusBadRequest, err)
		return
	}

	var newJob = dbo.Job{Data: string(rJobGeomotry)}
	dbo.DB.Create(&newJob)

	body := "{\"id\":\"" +
		strconv.Itoa(int(newJob.ID)) +
		"\", \"data\":" +
		string(rJobGeomotry) +
		", \"nextstep\":null}"

	dbo.Enqueue(body)

	c.JSON(http.StatusOK, gin.H{})
}

// PostStatorjobs - Create StatorJob
func DoPostStatorjobs(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}
