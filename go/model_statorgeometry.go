/*
 * ta-solve
 *
 * The unnamed Tin Arm solver API
 *
 * API version: 1.0
 * Contact: api@tinarmengineering.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// Statorgeometry - The stator geometry for this job 
type Statorgeometry struct {

	// Stator bore (mm)
	Bore *interface{} `json:"bore"`

	// Tooth tip depth (mm)
	ToothTipDepth *interface{} `json:"tooth_tip_depth"`

	// Slot opening (mm)
	SlotOpening *interface{} `json:"slot_opening"`

	// Tooth width (mm)
	ToothWidth *interface{} `json:"tooth_width"`

	// Stator outer diameter (mm)
	OuterDiameter *interface{} `json:"outer_diameter"`

	// Back iron thickness (mm)
	BackIronThickness *interface{} `json:"back_iron_thickness"`

	// Internal redius (mm)
	InternalRadius *interface{} `json:"internal_radius"`

	// Number of slots
	NumberSlots *interface{} `json:"number_slots"`

	// Tool tip angle (degrees)
	ToothTipAngle *interface{} `json:"tooth_tip_angle"`
}

// AssertStatorgeometryRequired checks if the required fields are not zero-ed
func AssertStatorgeometryRequired(obj Statorgeometry) error {
	elements := map[string]interface{}{
		"bore": obj.Bore,
		"tooth_tip_depth": obj.ToothTipDepth,
		"slot_opening": obj.SlotOpening,
		"tooth_width": obj.ToothWidth,
		"outer_diameter": obj.OuterDiameter,
		"back_iron_thickness": obj.BackIronThickness,
		"internal_radius": obj.InternalRadius,
		"number_slots": obj.NumberSlots,
		"tooth_tip_angle": obj.ToothTipAngle,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseStatorgeometryRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Statorgeometry (e.g. [][]Statorgeometry), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseStatorgeometryRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aStatorgeometry, ok := obj.(Statorgeometry)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertStatorgeometryRequired(aStatorgeometry)
	})
}
